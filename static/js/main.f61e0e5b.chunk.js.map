{"version":3,"sources":["IpDisplay.js","BasicInfo.js","ExpandedInfo.js","TimeZone.js","Flag.js","Card.js","Map.js","Loader.js","ErrorIpify.js","App.js","reportWebVitals.js","index.js"],"names":["IpDisplay","props","console","log","ip","BasicInfo","languages","map","language","name","join","capitalCity","callingCode","ExpandedInfo","className","info","nativeName","currencies","symbol","population","toLocaleString","region","subregion","regionalBlocs","TimeZone","timeComponent","locale","DateTime","local","zoneName","useState","currentTime","setCurrentTime","loadingTime","setLoadingTime","timeError","useEffect","interval","setInterval","now","toFormat","clearInterval","Flag","id","src","flag","alt","Card","state","error","isLoading","a","countryApiKey","this","locationData","location","country","fetch","response","ok","json","currentCountryInfo","setState","getCountry","onClick","closeCard","capital","callingCodes","React","Component","Map","centerLoc","lat","lng","cardVisible","setCardVisible","handleClick","prevState","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","eventHandlers","click","Loader","loading","size","duration","color","ErrorIpify","App","mapSection","setLocationData","errorState","setErrorState","loadingIp","setLoadingIp","getIp","currentIpInfo","ipUrl","message","getLoc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f61e0e5b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction IpDisplay(props) {\r\n    console.log(\"props.ip\")\r\n\r\n    console.log(props.ip)\r\n    return <div> Your IP is { props.ip } </div>\r\n}\r\n\r\nexport default IpDisplay;","import React from \"react\";\r\n\r\nfunction BasicInfo(props) {\r\n  console.log(\"props.languages\");\r\n\r\n  console.log(props.languages);\r\n  return (\r\n    <div>\r\n      <div><strong>Language: </strong> \r\n          <span>{props.languages.map((language) => {\r\n          return language.name\r\n        }).join(\", \")\r\n        }</span>\r\n        </div>\r\n      <div><strong>Capital city:</strong> {props.capitalCity}</div>\r\n      <div><strong>Calling Code:</strong> {props.callingCode}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BasicInfo;","import React from \"react\";\r\n\r\nfunction ExpandedInfo(props) {\r\n    return (\r\n        <div className=\"CountryInfo\">\r\n            <h3 className=\"CountryInfoCol\">Some interesting info about your country:</h3>\r\n            <div className=\"CountryInfoCol\">\r\n                <p><strong>Native name:</strong> {props.info.nativeName}</p>\r\n                <p><strong>Currency:</strong> {props.info.currencies[0].name} ({props.info.currencies[0].symbol})</p>\r\n                <p><strong>Population:</strong> {props.info.population.toLocaleString(\"en-GB\")} people</p>\r\n            </div>\r\n            <div className=\"CountryInfoCol\">\r\n                <p><strong>Region:</strong> {props.info.region}</p>\r\n                <p><strong>Subregion:</strong> {props.info.subregion}</p>\r\n                {props.info.regionalBlocs[0] && <p><strong>Regional bloc:</strong> {props.info.regionalBlocs[0][\"name\"]}</p> }\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpandedInfo;","import React, { useEffect, useState } from \"react\";\r\nimport { DateTime } from \"luxon\"\r\n\r\nfunction TimeZone() {\r\n    let locale = DateTime.local().zoneName;\r\n    const [currentTime, setCurrentTime] = useState(\"\");\r\n    const [loadingTime, setLoadingTime] = useState(true);\r\n    const [timeError, setTimeError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let timeRightNow = () => DateTime.now().toFormat('tttt')\r\n            setCurrentTime(timeRightNow)\r\n            setLoadingTime(false)\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [currentTime]);\r\n\r\n    // Need some help with not displaying the error message and instead have everything render anyways\r\n\r\n    let timeComponent;\r\n    if (!loadingTime) {\r\n        timeComponent = `Your time is ${currentTime} ${locale}`\r\n    } else if (timeError) {\r\n        timeComponent = \"Something has gone wrong when trying to get your time! Please try reloading the page\"\r\n    } else {\r\n        timeComponent = \"Loading your time...\"\r\n    }\r\n\r\n\r\n    return <div className=\"currentTime\" > { timeComponent } < /div>\r\n}\r\n\r\nexport default TimeZone;","import React from \"react\";\r\n\r\nfunction Flag(props) {\r\n  return (\r\n    <div>\r\n      <img id=\"countryFlag\" src={props.flag} alt=\"country flag\"></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Flag;","import React from \"react\";\r\nimport IpDisplay from \"./IpDisplay\";\r\nimport BasicInfo from \"./BasicInfo\";\r\nimport ExpandedInfo from \"./ExpandedInfo\";\r\nimport TimeZone from \"./TimeZone\";\r\nimport Flag from \"./Flag\"\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            isLoading: true\r\n        };\r\n    }\r\n\r\n    async getCountry() {\r\n        let countryUrl = \"https://restcountries.eu/rest/v2/alpha/\";\r\n        let countryApiKey = this.props.locationData.location.country;\r\n        let currentCountryInfo;\r\n        try {\r\n            const response = await fetch(countryUrl + countryApiKey);\r\n            console.log(response);\r\n            if (response.ok) {\r\n                currentCountryInfo = await response.json();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setState({error: true})\r\n        }\r\n        console.log(\"currentCountryInfo\");\r\n        console.log(currentCountryInfo);\r\n        if(!currentCountryInfo){\r\n            this.setState({error: true})\r\n        }\r\n        return currentCountryInfo;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let country = await this.getCountry();\r\n        this.setState({ country });\r\n        console.log(this.state);\r\n        this.setState({isLoading: false})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error == true) {\r\n            return <div className=\"CardContent\" >Whoopee dee doo</div>\r\n        }\r\n        else if (this.state.isLoading || !this.state.country){\r\n            return <div className=\"CardContent\" >Loading</div>\r\n        }\r\n        else if(this.state.country){\r\n        return (\r\n            <div className=\"CardContent\">\r\n                <div id=\"closeContainer\">\r\n                    <span id=\"closeBtn\"\r\n                        onClick={() => {\r\n                            this.props.closeCard();\r\n                        }}>X</span>\r\n                </div>\r\n                <div className=\"row1\">\r\n                    <div className=\"FlagContent\">\r\n                        <Flag \r\n                            flag={this.state.country.flag}\r\n                            />\r\n                    </div>\r\n                    <div className=\"infobox\">\r\n                        <div className=\"IpContent\">\r\n                            <IpDisplay ip={this.props.locationData.ip} />\r\n                        </div>\r\n                        <div className=\"TimeZone\"><TimeZone /></div>\r\n                        <div className=\"BasicInfo\">\r\n                            <BasicInfo\r\n                                languages={this.state.country.languages}\r\n                                capitalCity={this.state.country.capital}\r\n                                callingCode={this.state.country.callingCodes}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row2\">\r\n                    <ExpandedInfo info={this.state.country}/>\r\n                </div>\r\n            </div>\r\n        );}\r\n    }\r\n}\r\n\r\nexport default Card;","import { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport Card from \"./Card\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Map (props) {\r\n    const locationData = props.locationData.location;\r\n    const centerLoc = [locationData.lat, locationData.lng];\r\n    const [cardVisible, setCardVisible] = useState(true);\r\n    const handleClick = () => {\r\n        setCardVisible((prevState) => !prevState);\r\n    };\r\n    return (\r\n        <MapContainer\r\n            style={{ height: \"100vh\", width: \"100vw\" }}\r\n            center={centerLoc}\r\n            zoom={13}\r\n            scrollWheelZoom={false}\r\n        >\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker\r\n                position={centerLoc}\r\n                eventHandlers={{\r\n                    click: () => {\r\n                        handleClick();\r\n                    }\r\n                }}\r\n            ></Marker>\r\n            {cardVisible && (\r\n                <Card locationData={props.locationData} closeCard={handleClick} />\r\n            )}\r\n        </MapContainer>\r\n    );\r\n};","\r\nimport React from \"react\";\r\nimport { WaveLoader } from \"react-loaders-kit\";\r\n\r\nfunction Loader() {\r\n\r\n    const loaderProps = {\r\n      loading: true,\r\n      size: 275,\r\n      duration: 0.5,\r\n      color: \"#0f3c78\",\r\n    };\r\n  \r\n    return (\r\n      <div className=\"loader\">\r\n          <WaveLoader {...loaderProps} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Loader\r\n  ","import React from 'react';\r\n\r\nfunction ErrorIpify (props) {\r\n    return(\r\n        <div id=\"error\">\r\n            <p>Oops, something went wrong! Try again later!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorIpify","\r\nimport './App.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport Map from \"./Map\";\r\nimport Loader from \"./Loader\"\r\nimport ErrorIpify from './ErrorIpify'\r\n\r\n\r\n\r\nfunction App() {\r\n  const [locationData, setLocationData] = useState({});\r\n\r\nconst [errorState, setErrorState] = useState(false);\r\n\r\nconst [loadingIp, setLoadingIp] = useState(true);\r\n\r\nconst getIp = async () => {\r\n  let ipUrl = \"https://geo.ipify.org/api/v1?apiKey=\";\r\n  let ipApiKey = \"at_VF7kJXfX3dBVqla8cpVBLGmfQO3cg\";\r\n  let currentIpInfo = {error: \"unknown\"};\r\n  try {\r\n    const response = await fetch(ipUrl + ipApiKey)\r\n    if(response.ok) {\r\n      setErrorState(false);\r\n      currentIpInfo = await response.json()\r\n    }else{\r\n      setErrorState(true);\r\n      return currentIpInfo\r\n    }\r\n  } catch(error) {\r\n    setErrorState(true);\r\n    currentIpInfo.error = error.message\r\n  }\r\n  return currentIpInfo\r\n}\r\n\r\n\r\nuseEffect(() =>  {\r\n  async function getLoc() {\r\n  setLocationData(await getIp());\r\n  console.log(locationData);\r\n  setLoadingIp(false);\r\n  }\r\n\r\n  getLoc()\r\n}, [])\r\n\r\nlet mapSection;\r\nif(errorState){\r\n  mapSection = <ErrorIpify  />\r\n}else if(!loadingIp){\r\n  mapSection = <Map locationData={locationData} />\r\n}\r\nelse{\r\n  mapSection = <Loader />\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {mapSection}\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}