{"version":3,"sources":["IpDisplay.js","BasicInfo.js","TimeZone.js","Flag.js","Card.js","Map.js","Loader.js","ErrorIpify.js","App.js","reportWebVitals.js","index.js"],"names":["IpDisplay","props","console","log","ip","BasicInfo","languages","capitalCity","callingCode","TimeZone","locale","DateTime","local","zoneName","useState","currentTime","setCurrentTime","useEffect","interval","setInterval","timeRightNow","now","toFormat","clearInterval","Flag","id","src","flag","alt","Card","state","a","countryApiKey","this","locationData","location","country","fetch","response","ok","json","currentCountryInfo","getCountry","setState","className","onClick","closeCard","capital","callingCodes","React","Component","Map","centerLoc","lat","lng","cardVisible","setCardVisible","handleClick","prevState","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","eventHandlers","click","Loader","loading","size","duration","color","ErrorIpify","App","mapSection","setLocationData","errorState","setErrorState","loadingIp","setLoadingIp","getIp","currentIpInfo","error","ipUrl","message","getLoc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAUeA,MAPf,SAAmBC,GAIf,OAHAC,QAAQC,IAAI,YAEZD,QAAQC,IAAIF,EAAMG,IACX,+CAAmBH,EAAMG,GAAzB,QCQIC,MAbf,SAAmBJ,GAIjB,OAHAC,QAAQC,IAAI,mBAEZD,QAAQC,IAAIF,EAAMK,WAEhB,gCACE,6CAAgBL,EAAMK,aACtB,iDAAoBL,EAAMM,eAC1B,iDAAoBN,EAAMO,mB,QCUjBC,MAjBf,SAAkBR,GACd,IAAIS,EAASC,WAASC,QAAQC,SAC9B,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OATAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzB,IAAIC,EAAeT,WAASU,MAAMC,SAAS,QAC5CN,EAAeI,KACf,KACH,OAAO,kBAAMG,cAAcL,MAC1B,IAGE,iDAAqBH,EAArB,IAAoCL,EAApC,QCPIc,MARf,SAAcvB,GACZ,OACE,8BACE,qBAAKwB,GAAG,cAAcC,IAAKzB,EAAM0B,KAAMC,IAAI,oBC4ElCC,E,kDA1EX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IACD6B,MAAQ,GAFE,E,qFAKnB,gCAAAC,EAAA,4DACqB,0CACbC,EAAgBC,KAAKhC,MAAMiC,aAAaC,SAASC,QAFzD,kBAK+BC,MAJV,0CAI6BL,GALlD,UAKcM,EALd,OAMQpC,QAAQC,IAAImC,IACRA,EAASC,GAPrB,kCAQuCD,EAASE,OARhD,QAQYC,EARZ,iEAWQvC,QAAQC,IAAR,MAXR,eAaID,QAAQC,IAAI,sBACZD,QAAQC,IAAIsC,GAdhB,kBAeWA,GAfX,0D,4HAkBA,4BAAAV,EAAA,sEACwBE,KAAKS,aAD7B,OACQN,EADR,OAEIH,KAAKU,SAAS,CAAEP,YAChBlC,QAAQC,IAAI8B,KAAKH,OAHrB,gD,0EAMA,WAAU,IAAD,OACL,OAAKG,KAAKH,MAAMM,QAKZ,sBAAKQ,UAAU,cAAf,UACI,qBAAKnB,GAAG,iBAAR,SACI,sBAAMA,GAAG,WACLoB,QAAS,WACL,EAAK5C,MAAM6C,aAFnB,iBAKJ,sBAAKF,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,cAAC,EAAD,CACIjB,KAAMM,KAAKH,MAAMM,QAAQT,SAGjC,sBAAKiB,UAAU,UAAf,UACI,qBAAKA,UAAU,YAAf,SACI,cAAC,EAAD,CAAWxC,GAAI6B,KAAKhC,MAAMiC,aAAa9B,OAE3C,qBAAKwC,UAAU,WAAf,SAA0B,cAAC,EAAD,MAC1B,qBAAKA,UAAU,YAAf,SACI,cAAC,EAAD,CACItC,UAAW,yBACXC,YAAa0B,KAAKH,MAAMM,QAAQW,QAChCvC,YAAayB,KAAKH,MAAMM,QAAQY,uBAMhD,qBAAKJ,UAAU,OAAf,SACI,qBAAKA,UAAU,cAAf,SACI,qDAlCL,8C,GAhCAK,IAAMC,WCFV,SAASC,EAAKlD,GACzB,IAAMiC,EAAejC,EAAMiC,aAAaC,SAClCiB,EAAY,CAAClB,EAAamB,IAAKnB,EAAaoB,KAClD,EAAsCxC,oBAAS,GAA/C,mBAAOyC,EAAP,KAAoBC,EAApB,KACMC,EAAc,WAChBD,GAAe,SAACE,GAAD,OAAgBA,MAEnC,OACI,eAACC,EAAA,EAAD,CACIC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACjCC,OAAQX,EACRY,KAAM,GACNC,iBAAiB,EAJrB,UAMI,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAER,cAACC,EAAA,EAAD,CACIC,SAAUlB,EACVmB,cAAe,CACXC,MAAO,WACHf,QAIXF,GACG,cAAC,EAAD,CAAMrB,aAAcjC,EAAMiC,aAAcY,UAAWW,O,oBCXlDgB,MAhBjB,WASI,OACE,qBAAK7B,UAAU,SAAf,SACI,cAAC,aAAD,eATc,CAClB8B,SAAS,EACTC,KAAM,IACNC,SAAU,GACVC,MAAO,gBCAEC,MARf,SAAqB7E,GACjB,OACI,qBAAKwB,GAAG,QAAR,SACI,gFC6FGsD,MAzFf,WACE,IAqEEC,EArEF,EAAwClE,mBAAS,CAC/C,GAAM,UACN,SAAY,CACR,QAAW,KACX,OAAU,aACV,KAAQ,gBACR,IAAO,SACP,KAAQ,WACR,WAAc,QACd,SAAY,SACZ,UAAa,SAEjB,QAAW,CACP,UACA,aACA,gBACA,aACA,mBAEJ,GAAM,CACF,IAAO,MACP,KAAQ,aACR,MAAS,aACT,OAAU,gCACV,KAAQ,WAEZ,IAAO,aACP,MAAS,CACL,OAAS,EACT,KAAO,EACP,KAAO,KA9Bb,mBAAOoB,EAAP,KAAqB+C,EAArB,KAkCF,EAAoCnE,oBAAS,GAA7C,mBAAOoE,EAAP,KAAmBC,EAAnB,KAEA,EAAkCrE,oBAAS,GAA3C,mBAAOsE,EAAP,KAAkBC,EAAlB,KAEMC,EAAK,uCAAG,8BAAAvD,EAAA,4DACA,uCACG,mCACXwD,EAAgB,CAACC,MAAO,WAHhB,kBAKanD,MAAMoD,wEALnB,YAKJnD,EALI,QAMEC,GANF,wBAOR4C,GAAc,GAPN,UAQc7C,EAASE,OARvB,QAQR+C,EARQ,sCAURJ,GAAc,GAVN,kBAWDI,GAXC,0DAcVJ,GAAc,GACdI,EAAcC,MAAQ,KAAME,QAflB,iCAiBLH,GAjBK,0DAAH,qDA0CT,OArBFtE,qBAAU,WAAO,4CACf,sBAAAc,EAAA,kEACAkD,EADA,SACsBK,IADtB,kCAEApF,QAAQC,IAAI+B,GACZmD,GAAa,GAHb,4CADe,uBAAC,WAAD,wBAOfM,KACC,IAIDX,EADCE,EACY,cAAC,EAAD,IACLE,EAIK,cAAC,EAAD,IAHA,cAACjC,EAAD,CAAKjB,aAAcA,IAQ9B,sBAAKU,UAAU,MAAf,UACGoC,EACD,4BCjFSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5475164e.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction IpDisplay(props) {\n    console.log(\"props.ip\")\n\n    console.log(props.ip)\n    return <div> Your IP is { props.ip } </div>\n}\n\nexport default IpDisplay;","import React from \"react\";\n\nfunction BasicInfo(props) {\n  console.log(\"props.languages\");\n\n  console.log(props.languages);\n  return (\n    <div>\n      <div>Language: {props.languages}</div>\n      <div>Capital city: {props.capitalCity}</div>\n      <div>Calling Code: {props.callingCode}</div>\n    </div>\n  );\n}\n\nexport default BasicInfo;","import React, { useEffect, useState } from \"react\";\nimport { DateTime } from \"luxon\"\n\nfunction TimeZone(props) {\n    let locale = DateTime.local().zoneName;\n    const [currentTime, setCurrentTime] = useState(\"\")\n    \n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let timeRightNow = DateTime.now().toFormat('tttt')\n           setCurrentTime(timeRightNow)\n        }, 1000);\n        return () => clearInterval(interval);\n      }, []);\n\n\n    return <div> Your time is { currentTime } {locale} </div>\n}\n\nexport default TimeZone;","import React from \"react\";\n\nfunction Flag(props) {\n  return (\n    <div>\n      <img id=\"countryFlag\" src={props.flag} alt=\"country flag\"></img>\n    </div>\n  );\n}\n\nexport default Flag;","import React from \"react\";\nimport IpDisplay from \"./IpDisplay\";\nimport BasicInfo from \"./BasicInfo\";\nimport TimeZone from \"./TimeZone\";\nimport Flag from \"./Flag\"\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    async getCountry() {\n        let countryUrl = \"https://restcountries.eu/rest/v2/alpha/\";\n        let countryApiKey = this.props.locationData.location.country;\n        let currentCountryInfo;\n        try {\n            const response = await fetch(countryUrl + countryApiKey);\n            console.log(response);\n            if (response.ok) {\n                currentCountryInfo = await response.json();\n            }\n        } catch (error) {\n            console.log(error);\n        }\n        console.log(\"currentCountryInfo\");\n        console.log(currentCountryInfo);\n        return currentCountryInfo;\n    }\n\n    async componentDidMount() {\n        let country = await this.getCountry();\n        this.setState({ country });\n        console.log(this.state);\n    }\n\n    render() {\n        if (!this.state.country) {\n            return <div>Loading</div>\n        }\n\n        return (\n            <div className=\"CardContent\">\n                <div id=\"closeContainer\">\n                    <span id=\"closeBtn\"\n                        onClick={() => {\n                            this.props.closeCard();\n                        }}>X</span>\n                </div>\n                <div className=\"row1\">\n                    <div className=\"FlagContent\">\n                        <Flag \n                            flag={this.state.country.flag}\n                            />\n                    </div>\n                    <div className=\"infobox\">\n                        <div className=\"IpContent\">\n                            <IpDisplay ip={this.props.locationData.ip} />\n                        </div>\n                        <div className=\"TimeZone\"><TimeZone /></div>\n                        <div className=\"BasicInfo\">\n                            <BasicInfo\n                                languages={\"languages will be here\"}\n                                capitalCity={this.state.country.capital}\n                                callingCode={this.state.country.callingCodes}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row2\">\n                    <div className=\"CountryInfo\">\n                        <h3>Country Info</h3>\n                        {/* <ExpandedInfo /> */}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import { MapContainer, Marker, TileLayer } from \"react-leaflet\";\nimport Card from \"./Card\";\nimport { useState } from \"react\";\n\nexport default function Map (props) {\n    const locationData = props.locationData.location;\n    const centerLoc = [locationData.lat, locationData.lng];\n    const [cardVisible, setCardVisible] = useState(true);\n    const handleClick = () => {\n        setCardVisible((prevState) => !prevState);\n    };\n    return (\n        <MapContainer\n            style={{ height: \"100vh\", width: \"100vw\" }}\n            center={centerLoc}\n            zoom={13}\n            scrollWheelZoom={false}\n        >\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker\n                position={centerLoc}\n                eventHandlers={{\n                    click: () => {\n                        handleClick();\n                    }\n                }}\n            ></Marker>\n            {cardVisible && (\n                <Card locationData={props.locationData} closeCard={handleClick} />\n            )}\n        </MapContainer>\n    );\n};","\nimport React from \"react\";\nimport { WaveLoader } from \"react-loaders-kit\";\n\nfunction Loader() {\n\n    const loaderProps = {\n      loading: true,\n      size: 275,\n      duration: 0.5,\n      color: \"#0f3c78\",\n    };\n  \n    return (\n      <div className=\"loader\">\n          <WaveLoader {...loaderProps} />\n      </div>\n    );\n  }\n\n  export default Loader\n  ","import React from 'react';\n\nfunction ErrorIpify (props) {\n    return(\n        <div id=\"error\">\n            <p>Oops, something went wrong! Try again later!</p>\n        </div>\n    )\n}\n\nexport default ErrorIpify","\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport Map from \"./Map\";\nimport Loader from \"./Loader\"\nimport ErrorIpify from './ErrorIpify'\n\n\n\nfunction App() {\n  const [locationData, setLocationData] = useState({\n    \"ip\": \"8.8.8.8\",\n    \"location\": {\n        \"country\": \"US\",\n        \"region\": \"California\",\n        \"city\": \"Mountain View\",\n        \"lat\": 37.40599,\n        \"lng\": -122.078514,\n        \"postalCode\": \"94043\",\n        \"timezone\": \"-07:00\",\n        \"geonameId\": 5375481\n    },\n    \"domains\": [\n        \"0d2.net\",\n        \"003725.com\",\n        \"0f6.b0094c.cn\",\n        \"007515.com\",\n        \"0guhi.jocose.cn\"\n    ],\n    \"as\": {\n        \"asn\": 15169,\n        \"name\": \"Google LLC\",\n        \"route\": \"8.8.8.0/24\",\n        \"domain\": \"https://about.google/intl/en/\",\n        \"type\": \"Content\"\n    },\n    \"isp\": \"Google LLC\",\n    \"proxy\": {\n        \"proxy\": false,\n        \"vpn\": false,\n        \"tor\": false\n    },\n});\n\nconst [errorState, setErrorState] = useState(false);\n\nconst [loadingIp, setLoadingIp] = useState(true);\n\nconst getIp = async () => {\n  let ipUrl = \"https://geo.ipify.org/api/v1?apiKey=\";\n  let ipApiKey = \"at_VF7kJXfX3dBVqla8cpVBLGmfQO3cg\";\n  let currentIpInfo = {error: \"unknown\"};\n  try {\n    const response = await fetch(ipUrl + ipApiKey)\n    if(response.ok) {\n      setErrorState(false);\n      currentIpInfo = await response.json()\n    }else{\n      setErrorState(true);\n      return currentIpInfo\n    }\n  } catch(error) {\n    setErrorState(true);\n    currentIpInfo.error = error.message\n  }\n  return currentIpInfo\n}\n\n\nuseEffect(() =>  {\n  async function getLoc() {\n  setLocationData(await getIp());\n  console.log(locationData);\n  setLoadingIp(false);\n  }\n\n  getLoc()\n}, [])\n\nlet mapSection;\nif(errorState){\n  mapSection = <ErrorIpify  />\n}else if(!loadingIp){\n  mapSection = <Map locationData={locationData} />\n}\nelse{\n  mapSection = <Loader />\n}\n\n\n  return (\n    <div className=\"App\">\n      {mapSection}\n      <div></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}