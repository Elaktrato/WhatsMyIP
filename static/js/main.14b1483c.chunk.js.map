{"version":3,"sources":["IpDisplay.js","TimeZone.js","Card.js","Map.js","Loader.js","ErrorIpify.js","App.js","reportWebVitals.js","index.js"],"names":["IpDisplay","props","console","log","ip","TimeZone","locale","DateTime","local","zoneName","useState","currentTime","setCurrentTime","useEffect","interval","setInterval","timeRightNow","now","toFormat","clearInterval","Card","className","id","onClick","closeCard","this","locationData","React","Component","Map","location","centerLoc","lat","lng","cardVisible","setCardVisible","handleClick","prevState","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","eventHandlers","click","Loader","loading","size","duration","color","ErrorIpify","App","mapSection","setLocationData","errorState","setErrorState","loadingIp","setLoadingIp","getIp","a","currentIpInfo","error","fetch","ipUrl","response","ok","json","message","getLoc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14b1483c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction IpDisplay(props) {\r\n    console.log(\"props.ip\")\r\n\r\n    console.log(props.ip)\r\n    return <div> Your IP is { props.ip } </div>\r\n}\r\n\r\nexport default IpDisplay;","import React, { useEffect, useState } from \"react\";\r\nimport { DateTime } from \"luxon\"\r\n\r\nfunction TimeZone(props) {\r\n    let locale = DateTime.local().zoneName;\r\n    const [currentTime, setCurrentTime] = useState(\"\")\r\n    \r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let timeRightNow = DateTime.now().toFormat('tttt')\r\n           setCurrentTime(timeRightNow)\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n      }, []);\r\n\r\n\r\n    return <div> Your time is { currentTime } {locale} </div>\r\n}\r\n\r\nexport default TimeZone;","import React from 'react';\r\nimport IpDisplay from \"./IpDisplay\";\r\nimport TimeZone from \"./TimeZone\";\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CardContent\">\r\n                <div id=\"closeContainer\">\r\n                    <span id=\"closeBtn\"\r\n                        onClick={() => {\r\n                            this.props.closeCard();\r\n                        }}>X</span>\r\n                </div>\r\n                <div className=\"row1\">\r\n                    <div className=\"FlagContent\">\r\n                        {/* <Flag /> */}\r\n                    </div>\r\n                    <div className=\"infobox\">\r\n                        <div className=\"IpContent\">\r\n                            <IpDisplay ip={this.props.locationData.ip} /></div>\r\n                        <div className=\"TimeZone\"><TimeZone /></div>\r\n                        <div className=\"BasicInfo\">{/* <BasicInfo /> */}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row2\">\r\n                    <div className=\"CountryInfo\">\r\n                        <h3>Country Info</h3>\r\n                        {/* <ExpandedInfo /> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport Card from \"./Card\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Map (props) {\r\n    const locationData = props.locationData.location;\r\n    const centerLoc = [locationData.lat, locationData.lng];\r\n    const [cardVisible, setCardVisible] = useState(true);\r\n    const handleClick = () => {\r\n        setCardVisible((prevState) => !prevState);\r\n    };\r\n    return (\r\n        <MapContainer\r\n            style={{ height: \"100vh\", width: \"100vw\" }}\r\n            center={centerLoc}\r\n            zoom={13}\r\n            scrollWheelZoom={false}\r\n        >\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker\r\n                position={centerLoc}\r\n                eventHandlers={{\r\n                    click: () => {\r\n                        handleClick();\r\n                    }\r\n                }}\r\n            ></Marker>\r\n            {cardVisible && (\r\n                <Card locationData={props.locationData} closeCard={handleClick} />\r\n            )}\r\n        </MapContainer>\r\n    );\r\n};","\r\nimport React from \"react\";\r\nimport { WaveLoader } from \"react-loaders-kit\";\r\n\r\nfunction Loader() {\r\n\r\n    const loaderProps = {\r\n      loading: true,\r\n      size: 275,\r\n      duration: 0.5,\r\n      color: \"#0f3c78\",\r\n    };\r\n  \r\n    return (\r\n      <div className=\"loader\">\r\n          <WaveLoader {...loaderProps} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Loader\r\n  ","import React from 'react';\r\n\r\nfunction ErrorIpify (props) {\r\n    return(\r\n        <div id=\"error\">\r\n            <p>Oops, something went wrong! Try again later!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorIpify","\r\nimport './App.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport Map from \"./Map\";\r\nimport Loader from \"./Loader\"\r\nimport ErrorIpify from './ErrorIpify'\r\n\r\n\r\n\r\nfunction App() {\r\n  const [locationData, setLocationData] = useState({\r\n    \"ip\": \"8.8.8.8\",\r\n    \"location\": {\r\n        \"country\": \"US\",\r\n        \"region\": \"California\",\r\n        \"city\": \"Mountain View\",\r\n        \"lat\": 37.40599,\r\n        \"lng\": -122.078514,\r\n        \"postalCode\": \"94043\",\r\n        \"timezone\": \"-07:00\",\r\n        \"geonameId\": 5375481\r\n    },\r\n    \"domains\": [\r\n        \"0d2.net\",\r\n        \"003725.com\",\r\n        \"0f6.b0094c.cn\",\r\n        \"007515.com\",\r\n        \"0guhi.jocose.cn\"\r\n    ],\r\n    \"as\": {\r\n        \"asn\": 15169,\r\n        \"name\": \"Google LLC\",\r\n        \"route\": \"8.8.8.0/24\",\r\n        \"domain\": \"https://about.google/intl/en/\",\r\n        \"type\": \"Content\"\r\n    },\r\n    \"isp\": \"Google LLC\",\r\n    \"proxy\": {\r\n        \"proxy\": false,\r\n        \"vpn\": false,\r\n        \"tor\": false\r\n    },\r\n});\r\n\r\nconst [errorState, setErrorState] = useState(false);\r\n\r\nconst [loadingIp, setLoadingIp] = useState(true);\r\n\r\nconst getIp = async () => {\r\n  let ipUrl = \"https://geo.ipify.org/api/v1?apiKey=\";\r\n  let ipApiKey = \"at_VF7kJXfX3dBVqla8cpVBLGmfQO3cg\";\r\n  let currentIpInfo = {error: \"unknown\"};\r\n  try {\r\n    const response = await fetch(ipUrl + ipApiKey)\r\n    if(response.ok) {\r\n      setErrorState(false);\r\n      currentIpInfo = await response.json()\r\n    }else{\r\n      setErrorState(true);\r\n      return currentIpInfo\r\n    }\r\n  } catch(error) {\r\n    setErrorState(true);\r\n    currentIpInfo.error = error.message\r\n  }\r\n  return currentIpInfo\r\n}\r\n\r\n\r\nuseEffect(() =>  {\r\n  async function getLoc() {\r\n  setLocationData(await getIp());\r\n  console.log(locationData);\r\n  setLoadingIp(false);\r\n  }\r\n\r\n  getLoc()\r\n}, [])\r\n\r\nlet mapSection;\r\nif(errorState){\r\n  mapSection = <ErrorIpify  />\r\n}else if(!loadingIp){\r\n  mapSection = <Map locationData={locationData} />\r\n}\r\nelse{\r\n  mapSection = <Loader />\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {mapSection}\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}